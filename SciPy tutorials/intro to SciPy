SciPy:

Numpy provides a high-performance multidimensional array and basic tools to compute with and manipulate these arrays.
 
SciPy builds on this, and provides a large number of functions that operate on numpy arrays and are useful for different types of scientific and engineering applications.

The best way to get familiar with SciPy is to browse the documentation.
We will highlight some parts of SciPy that you might find useful for this class.

Image operations:(you can use any image for resizing)

SciPy provides some basic functions to work with images. 
For example, it has functions to read images from disk into numpy arrays, 
to write numpy arrays to disk as images, and to resize images. 
Here is a simple example that showcases these functions:


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


from scipy.misc import imread, imsave, imresize

# Read an JPEG image into a numpy array
img = imread('assets/cat.jpg')
print(img.dtype, img.shape)  # Prints "uint8 (400, 248, 3)"

# We can tint the image by scaling each of the color channels
# by a different scalar constant. The image has shape (400, 248, 3);
# we multiply it by the array [1, 0.95, 0.9] of shape (3,);
# numpy broadcasting means that this leaves the red channel unchanged,
# and multiplies the green and blue channels by 0.95 and 0.9
# respectively.
img_tinted = img * [1, 0.95, 0.9]

# Resize the tinted image to be 300 by 300 pixels.
img_tinted = imresize(img_tinted, (300, 300))

# Write the tinted image back to disk
imsave('assets/cat_tinted.jpg', img_tinted)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


MATLAB files

The functions scipy.io.loadmat and scipy.io.savemat -->allow you to read and write MATLAB files. 
You can read about them in the documentation.

Distance between points

SciPy defines some useful functions for computing distances between sets of points.

The function scipy.spatial.distance.pdist computes the distance between all pairs of points in a given set:


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


import numpy as np
from scipy.spatial.distance import pdist, squareform

# Create the following array where each row is a point in 2D space:
# [[0 1]
#  [1 0]
#  [2 0]]
x = np.array([[0, 1], [1, 0], [2, 0]])
print(x)

# Compute the Euclidean distance between all rows of x.
# d[i, j] is the Euclidean distance between x[i, :] and x[j, :],
# and d is the following array:
# [[ 0.          1.41421356  2.23606798]
#  [ 1.41421356  0.          1.        ]
#  [ 2.23606798  1.          0.        ]]
d = squareform(pdist(x, 'euclidean'))
print(d)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


You can read all the details about this function in the documentation.

A similar function (scipy.spatial.distance.cdist) computes the distance between all pairs across two sets of points; you can read about it in the documentation.

